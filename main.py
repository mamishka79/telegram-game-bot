from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio
import json
import os

DATA_FILE = "db.json"

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf8") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

TOKEN = "7285975428:AAHqWZR4h1KVWS3pztMq5nljhKD0bfZPyM0"  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
user_progress = load_data()
waiting_for_task = {}         # –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è
waiting_for_completion = {}   # –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–≥—Ä–æ–≤—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
game_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úç –í–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton(text="üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in user_progress:
        user_progress[user_id] = {"points": 0, "tasks": []}
        save_data(user_progress)
    waiting_for_task[user_id] = False
    waiting_for_completion[user_id] = False
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ. –ù–∞—á–Ω–µ–º?", reply_markup=game_keyboard)

@dp.message(F.text == "‚úç –í–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ")
async def input_task(message: types.Message):
    user_id = str(message.from_user.id)
    waiting_for_task[user_id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:")

@dp.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_tasks(message: types.Message):
    user_id = str(message.from_user.id)
    tasks_list = user_progress.get(user_id, {"tasks": []})["tasks"]
    if not tasks_list:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    response = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for i, task in enumerate(tasks_list, start=1):
        response += f"{i}. {task['description']} - {task['status']}\n"
    await message.answer(response)

@dp.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def complete_task(message: types.Message):
    user_id = str(message.from_user.id)
    tasks_list = user_progress.get(user_id, {"tasks": []})["tasks"]
    if not tasks_list:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    waiting_for_completion[user_id] = True  # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")

@dp.message(F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: types.Message):
    user_id = str(message.from_user.id)
    progress = user_progress.get(user_id, {"points": 0, "tasks": []})
    completed_count = sum(1 for t in progress["tasks"] if t["status"] == "–≤—ã–ø–æ–ª–Ω–µ–Ω")
    await message.answer(f"üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}\nüèÜ –û—á–∫–æ–≤: {progress['points']}")

@dp.message(F.text == "üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_feedback(message: types.Message):
    await message.answer("üì¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ –º—ã –µ–≥–æ —É—á—Ç–µ–º!")

@dp.message()
async def handle_message(message: types.Message):
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    if waiting_for_task.get(user_id, False):
        task_description = message.text.strip()
        if task_description:
            user_progress[user_id]["tasks"].append({
                "description": task_description,
                "status": "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
            })
            waiting_for_task[user_id] = False
            save_data(user_progress)
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.")
        else:
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if waiting_for_completion.get(user_id, False):
        try:
            index = int(message.text.strip())
        except ValueError:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            return

        tasks_list = user_progress.get(user_id, {"tasks": []})["tasks"]
        if index < 1 or index > len(tasks_list):
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            task = tasks_list[index-1]
            if task["status"] == "–≤—ã–ø–æ–ª–Ω–µ–Ω":
                await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            else:
                task["status"] = "–≤—ã–ø–æ–ª–Ω–µ–Ω"
                user_progress[user_id]["points"] += 10  # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['description']}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ +10 –æ—á–∫–æ–≤!")
            save_data(user_progress)
        waiting_for_completion[user_id] = False
        return

    # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
