from aiogram import types, Router, F
from utils.storage import load_data, save_data

task_router = Router()

user_progress = load_data()
waiting_for_task = {}
waiting_for_completion = {}

@task_router.message(F.text == "‚úç –í–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ")
async def input_task(message: types.Message):
    user_id = str(message.from_user.id)
    waiting_for_task[user_id] = True
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:")

@task_router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
async def complete_task(message: types.Message):
    user_id = str(message.from_user.id)
    tasks_list = user_progress.get(user_id, {"tasks": []})["tasks"]
    if not tasks_list:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    waiting_for_completion[user_id] = True
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:")

@task_router.message()
async def handle_task_input(message: types.Message):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥-–∫–Ω–æ–ø–æ–∫
    if message.text in ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"]:
        return  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ, –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if waiting_for_task.get(user_id, False):
        task_description = message.text.strip()
        if task_description:
            user_progress[user_id]["tasks"].append({
                "description": task_description,
                "status": "–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
            })
            waiting_for_task[user_id] = False
            save_data(user_progress)
            await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.")
        else:
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    if waiting_for_completion.get(user_id, False):
        try:
            index = int(message.text.strip())
        except ValueError:
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
            return

        tasks_list = user_progress.get(user_id, {"tasks": []})["tasks"]
        if index < 1 or index > len(tasks_list):
            await message.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            task = tasks_list[index-1]
            if task["status"] == "–≤—ã–ø–æ–ª–Ω–µ–Ω":
                await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            else:
                task["status"] = "–≤—ã–ø–æ–ª–Ω–µ–Ω"
                user_progress[user_id]["points"] += 10
                await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ \"{task['description']}\" –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è. –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ +10 –æ—á–∫–æ–≤!")
            save_data(user_progress)
        waiting_for_completion[user_id] = False
        return

    await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")